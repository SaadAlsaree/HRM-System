// <auto-generated />
using System;
using HRM.Hub.Persistence.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HRM.Hub.Persistence.Migrations
{
    [DbContext(typeof(HumanResourcesDbContext))]
    [Migration("20250407142432_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.7.23375.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Absence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("AbsenceDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("AbsenceOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("AbsenceOrderNo")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("BookDate")
                        .HasColumnType("date");

                    b.Property<string>("BookNo")
                        .HasColumnType("text");

                    b.Property<int>("CountOfDays")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("ReturnOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("ReturnOrderNo")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Absence");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.AcademicAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobDegreeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobDegreeId");

                    b.ToTable("AcademicAchievement");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.AcademicCertificateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AcademicCertificateType");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.AcademicField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AcademicField");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.AddressInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("integer");

                    b.Property<string>("HouseNo")
                        .HasColumnType("text");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("NearestPoint")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("StreetNo")
                        .HasColumnType("text");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("AddressInformation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.AdministrativeOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AdministrativeOrderType")
                        .HasColumnType("integer");

                    b.Property<string>("BookTitle")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderNo")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AdministrativeOrder");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountOfDegreeJob")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Assignments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssignedFromOrganization")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToOrganization")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("AssignmentOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("AssignmentOrderNo")
                        .HasColumnType("text");

                    b.Property<int>("AssignmentSite")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DurationOfAssignment")
                        .HasColumnType("integer");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("EndHireDate")
                        .HasColumnType("date");

                    b.Property<string>("EndHireNo")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("EndOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("EndOrderNo")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("EndReleaseOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("EndReleaseOrderNo")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("HireOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("HireOrderNo")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderNo")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ReleaseOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("ReleaseOrderNo")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeOfAssignmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TypeOfAssignmentId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Attachments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtinctionFile")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid?>("PrimaryTableId")
                        .HasColumnType("uuid");

                    b.Property<string>("Secret")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Attributes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttributeKey")
                        .HasColumnType("text");

                    b.Property<string>("AttributeValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.ChangeDegrees", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("JobCategoryFromId")
                        .HasColumnType("integer");

                    b.Property<int>("JobCategoryToId")
                        .HasColumnType("integer");

                    b.Property<int>("JobDegreeFromId")
                        .HasColumnType("integer");

                    b.Property<int>("JobDegreeToId")
                        .HasColumnType("integer");

                    b.Property<int>("JobDescriptionFromId")
                        .HasColumnType("integer");

                    b.Property<int>("JobDescriptionToId")
                        .HasColumnType("integer");

                    b.Property<int>("JobTitleFromId")
                        .HasColumnType("integer");

                    b.Property<int>("JobTitleToId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("NewCategoryDueDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("NewDegreeDueDate")
                        .HasColumnType("date");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateOnly>("OldCategoryDueDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("OldDegreeDueDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderNo")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("JobCategoryFromId");

                    b.HasIndex("JobCategoryToId");

                    b.HasIndex("JobDegreeFromId");

                    b.HasIndex("JobDegreeToId");

                    b.HasIndex("JobDescriptionFromId");

                    b.HasIndex("JobDescriptionToId");

                    b.HasIndex("JobTitleFromId");

                    b.HasIndex("JobTitleToId");

                    b.ToTable("ChangeDegree");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.ChangeDueDates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("CurrentCategoryDueDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("CurrentDegreeDueDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("NewCategoryDueDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("NewDegreeDueDate")
                        .HasColumnType("date");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderNo")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ChangeDueDate");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.ChangeJobTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<int?>("NewJobDescriptionId")
                        .HasColumnType("integer");

                    b.Property<int?>("NewJobTitleId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("OldJobDescriptionId")
                        .HasColumnType("integer");

                    b.Property<int?>("OldJobTitleId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderNo")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NewJobDescriptionId");

                    b.HasIndex("NewJobTitleId");

                    b.HasIndex("OldJobDescriptionId");

                    b.HasIndex("OldJobTitleId");

                    b.ToTable("ChangeJobTitle");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.CompletedOrders", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfOrders")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("OnDate")
                        .HasColumnType("date");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<string>("TeamName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompletedOrders");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.ContactInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<int?>("LevelOfRelationshipId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LevelOfRelationshipId");

                    b.ToTable("ContactInformation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.CorrectingAcademicAchievements", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("BookDate")
                        .HasColumnType("date");

                    b.Property<string>("BookNo")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<int?>("DegreeFromId")
                        .HasColumnType("integer");

                    b.Property<int?>("DegreeToId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateOnly?>("DueDateCategory")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DueDateDegree")
                        .HasColumnType("date");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsCertificateCalculation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobCategoryFromId")
                        .HasColumnType("integer");

                    b.Property<int?>("JobCategoryToId")
                        .HasColumnType("integer");

                    b.Property<int>("JobDescriptionFromId")
                        .HasColumnType("integer");

                    b.Property<int>("JobDescriptionToId")
                        .HasColumnType("integer");

                    b.Property<int>("JobTitleFromId")
                        .HasColumnType("integer");

                    b.Property<int>("JobTitleToId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DegreeFromId");

                    b.HasIndex("DegreeToId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("JobCategoryFromId");

                    b.HasIndex("JobCategoryToId");

                    b.HasIndex("JobDescriptionFromId");

                    b.HasIndex("JobDescriptionToId");

                    b.HasIndex("JobTitleFromId");

                    b.HasIndex("JobTitleToId");

                    b.ToTable("CorrectingAcademicAchievements");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<int?>("DirectorateId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortKey")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubDirectorateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("SubDirectorateId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Directorates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortKey")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Directorates");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.DocVerifications", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Answered")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DocumentDate")
                        .HasColumnType("date");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Recipient")
                        .HasColumnType("text");

                    b.Property<DateOnly>("SendingDate")
                        .HasColumnType("date");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_DocVerifications_EmployeeId");

                    b.ToTable("DocVerifications");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.EducationInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AcademicAchievementId")
                        .HasColumnType("integer");

                    b.Property<int>("AcademicFieldId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Average")
                        .HasColumnType("numeric");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("DocumentDate")
                        .HasColumnType("date");

                    b.Property<string>("DocumentNo")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("DocumentSendDate")
                        .HasColumnType("date");

                    b.Property<string>("DocumentSender")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("GraduationYear")
                        .HasColumnType("text");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDocumentVerify")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDuringRecruitment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInHiring")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("NameOfIssuingCertificate")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("OriginalDocument")
                        .HasColumnType("text");

                    b.Property<int>("PreciseAcademicFieldId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("StudyTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AcademicAchievementId");

                    b.HasIndex("AcademicFieldId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PreciseAcademicFieldId");

                    b.HasIndex("StudyTypeId");

                    b.ToTable("EducationInformation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.EmployeeApplicableLaws", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<int?>("LawId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LawId");

                    b.ToTable("EmployeeApplicableLaws");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.EmployeeCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CourseDurationInDays")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("CourseOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("CourseOrderNo")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Evaluation")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("HireOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("HireOrderNo")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("NominationOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("NominationOrderNo")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ReleaseOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("ReleaseOrderNo")
                        .HasColumnType("text");

                    b.Property<string>("ResidentEntity")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeCourses");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.EmployeeDisciplinary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("BookDate")
                        .HasColumnType("date");

                    b.Property<string>("BookNo")
                        .HasColumnType("text");

                    b.Property<int?>("CountOfDayDelay")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DisciplinaryLaw")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<bool?>("StopPromotion")
                        .HasColumnType("boolean");

                    b.Property<string>("TitleOfBook")
                        .HasColumnType("text");

                    b.Property<int>("TypeOfDisciplinaryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TypeOfDisciplinaryId");

                    b.ToTable("EmployeeDisciplinary");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.EmployeeDocuments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DocumentAttribute")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EmployeeDocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeDocumentTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDocuments");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.EmployeeDocumentsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EmployeeDocumentsType");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.EmployeePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("AdministrativeOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("AdministrativeOrderNo")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("AssignedDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("AssignedOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("AssignedOrderNo")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("DirectorateId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<int>("EmployeePositionType")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("EndAssignedOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("EndAssignedOrderNo")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("PositionId")
                        .HasColumnType("integer");

                    b.Property<int?>("SectionId")
                        .HasColumnType("integer");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubDirectorateId")
                        .HasColumnType("integer");

                    b.Property<int?>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PositionId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubDirectorateId");

                    b.HasIndex("UnitId");

                    b.ToTable("EmployeePositions");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.EmployeeService", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PromotionCalculation")
                        .HasColumnType("text");

                    b.Property<string>("RetirementCalculation")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EmployeeService");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Employees", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("text");

                    b.Property<int>("ChildrenCount")
                        .HasColumnType("integer");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FourthName")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<string>("JobCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LotNumber")
                        .HasColumnType("text");

                    b.Property<string>("MotherFirstName")
                        .HasColumnType("text");

                    b.Property<string>("MotherFullName")
                        .HasColumnType("text");

                    b.Property<string>("MotherSecondName")
                        .HasColumnType("text");

                    b.Property<string>("MotherSurName")
                        .HasColumnType("text");

                    b.Property<string>("MotherThirdName")
                        .HasColumnType("text");

                    b.Property<string>("Nationalism")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Religion")
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .HasColumnType("text");

                    b.Property<int?>("SocialStatus")
                        .HasColumnType("integer");

                    b.Property<string>("StatisticalIndex")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusWorkingId")
                        .HasColumnType("integer");

                    b.Property<string>("SurName")
                        .HasColumnType("text");

                    b.Property<string>("ThirdName")
                        .HasColumnType("text");

                    b.Property<string>("WifeName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex(new[] { "JobCode" }, "Employees_JobCode_key")
                        .IsUnique();

                    b.HasIndex(new[] { "LotNumber" }, "Employees_LotNumber_key")
                        .IsUnique();

                    b.HasIndex(new[] { "StatisticalIndex" }, "Employees_StatisticalIndex_key")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Governorate");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.HandPull", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RaiseHandPullOrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RaiseHandPullOrderNo")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WithdrawHandPullOrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WithdrawHandPullOrderNo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("HandPull");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Interruption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Interruption");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.JobCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<int>("DegreeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("IncreaseAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NextPromotion")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.ToTable("JobCategory");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.JobDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("IncreaseAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NextPromotion")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("JobDegree");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.JobDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("JobDescription");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.JobInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateOnly?>("EndOfServiceDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsBehaviorCode")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsMovedFromOutside")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsReEmployed")
                        .HasColumnType("boolean");

                    b.Property<int?>("IsStillWorking")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<bool?>("MedicalTest")
                        .HasColumnType("boolean");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeOfJobId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeOfJobId");

                    b.ToTable("JobInformation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<int>("DegreeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.ToTable("JobTitle");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Laws", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Laws");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Leaves", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CountOfDays")
                        .HasColumnType("integer");

                    b.Property<int?>("CountOfMinutes")
                        .HasColumnType("integer");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CutReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfAssignment")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfBirthCertificate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfPermission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfRelease")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("FromDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("HireOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("HireOrderNo")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsInside")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<int?>("LongLeaveTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("NoOfAssignment")
                        .HasColumnType("text");

                    b.Property<string>("NoOfBirthCertificate")
                        .HasColumnType("text");

                    b.Property<string>("NoOfPermission")
                        .HasColumnType("text");

                    b.Property<string>("NoOfRelease")
                        .HasColumnType("text");

                    b.Property<string>("NoOfStart")
                        .HasColumnType("text");

                    b.Property<int?>("NormalLeaveTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderNo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SalaryStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("SicknessTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("ToDate")
                        .HasColumnType("date");

                    b.Property<int>("TypeOfLeaveId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LongLeaveTypeId");

                    b.HasIndex("NormalLeaveTypeId");

                    b.HasIndex("SicknessTypeId");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.LeavesBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("Balance")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LeavesBalance");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.LeavesMedicalBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<double?>("Balance")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LeavesMedicalBalance");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.LevelOfRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LevelOfRelationship");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.LogLeavesBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("BookDate")
                        .HasColumnType("date");

                    b.Property<string>("BookNo")
                        .HasColumnType("text");

                    b.Property<int?>("CountOfDay")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("NameOfIssuing")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeOfLeaveId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("LogLeavesBalance");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.LogPromotionWithholding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("ReasonForWithholding")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("ScheduledPromotionDate")
                        .HasColumnType("date");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("WithholdingDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("LogPromotionWithholdings");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.LongLeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LongLeaveType");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.ManagementInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("DirectorateId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EmploymentDegreeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInHiring")
                        .HasColumnType("boolean");

                    b.Property<int>("JobDescriptionId")
                        .HasColumnType("integer");

                    b.Property<int>("JobTitleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<int?>("SectionId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("StopJobDegreeId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubDirectorateId")
                        .HasColumnType("integer");

                    b.Property<int?>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("EmploymentDegreeId");

                    b.HasIndex("JobDescriptionId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("PositionId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StopJobDegreeId");

                    b.HasIndex("SubDirectorateId");

                    b.HasIndex("UnitId");

                    b.ToTable("ManagementInformation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.MarriageInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ChildrenCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("MarriageDate")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("SurName")
                        .HasColumnType("text");

                    b.Property<string>("ThirdName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("MarriageInformation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.MartyrsAndWounded", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AdministrativeOrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AdministrativeOrderNo")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("DateOfDeath")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfMartyrdom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDateOfService")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("HealthStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPoliticallyDismissed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RetirementDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("MartyrsAndWounded");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Movements", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<int?>("FromDepartmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("FromDirectorateId")
                        .HasColumnType("integer");

                    b.Property<int?>("FromSectionId")
                        .HasColumnType("integer");

                    b.Property<int?>("FromSubDirectorateId")
                        .HasColumnType("integer");

                    b.Property<int?>("FromUniteId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("HireOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("HireOrderNo")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderNo")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ReleaseOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("ReleaseOrderNo")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("ToDepartmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("ToDirectorateId")
                        .HasColumnType("integer");

                    b.Property<int?>("ToSectionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ToSubDirectorateId")
                        .HasColumnType("integer");

                    b.Property<int?>("ToUnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FromDepartmentId");

                    b.HasIndex("FromDirectorateId");

                    b.HasIndex("FromSectionId");

                    b.HasIndex("FromSubDirectorateId");

                    b.HasIndex("FromUniteId");

                    b.HasIndex("ToDepartmentId");

                    b.HasIndex("ToDirectorateId");

                    b.HasIndex("ToSectionId");

                    b.HasIndex("ToSubDirectorateId");

                    b.HasIndex("ToUnitId");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.NormalLeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("NormalLeaveType");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.PreciseAcademicField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PreciseAcademicField");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateOnly?>("DueDateCategory")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DueDateDegree")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("JobDegreeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<long?>("SentPromotionGroupId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ServiceRecycle")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<bool>("StopPromotion")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("JobDegreeId");

                    b.HasIndex("SentPromotionGroupId");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.PromotionGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("CountEmployee")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateOnly?>("GroupDoneDate")
                        .HasColumnType("date");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("GroupSendDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PromotionGroup");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Resignation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestNo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResignationOrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ResignationOrderNo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SeparationOrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SeparationOrderNo")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Resignations");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Retirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AcademicAchievementId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AdministrativeOrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AdministrativeOrderNo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DecisionToFixAge")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<int?>("DirectorateId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeePositionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDateOfService")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPoliticallyDismissed")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("JobDegreeId")
                        .HasColumnType("integer");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("RetirementDate")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubDirectorateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AcademicAchievementId");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeePositionId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("JobDegreeId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("SubDirectorateId");

                    b.ToTable("Retirements");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Sections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("DirectorateId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortKey")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("SubDirectorateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("SubDirectorateId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.ServiceCalculation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CountOfMonth")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeesId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPoliticalTermination")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderNo")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeOfServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("TypeOfServiceId");

                    b.ToTable("ServiceCalculation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.SicknessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SicknessType");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.StudyExtensionOrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("StudyExtensionOrderType");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.StudyFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("DocumentDate")
                        .HasColumnType("date");

                    b.Property<string>("DocumentNo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("StudyFile");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.StudyLeave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AcademicAchievementId")
                        .HasColumnType("integer");

                    b.Property<int?>("AcademicCertificateTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("AcademicFieldId")
                        .HasColumnType("integer");

                    b.Property<string>("AcceptanceYear")
                        .HasColumnType("text");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("FinancialInsuranceDate")
                        .HasColumnType("date");

                    b.Property<string>("FinancialInsuranceNo")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("HireOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("HireOrderNo")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("NameOfIssuingCertificate")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ReleaseOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("ReleaseOrderNo")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StudyFileId")
                        .HasColumnType("uuid");

                    b.Property<int?>("StudyPeriodTime")
                        .HasColumnType("integer");

                    b.Property<int?>("StudyResultId")
                        .HasColumnType("integer");

                    b.Property<int?>("StudyStatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AcademicAchievementId");

                    b.HasIndex("AcademicCertificateTypeId");

                    b.HasIndex("AcademicFieldId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StudyFileId");

                    b.HasIndex("StudyResultId");

                    b.HasIndex("StudyStatusId");

                    b.ToTable("StudyLeave");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.StudyLeaveExtension", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfDay")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("FromDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderNo")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("StudyExtensionOrderTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StudyFileId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StudyExtensionOrderTypeId");

                    b.HasIndex("StudyFileId");

                    b.ToTable("StudyLeaveExtension");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.StudyResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("StudyResult");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.StudyStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("StudyStatus");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.StudyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("StudyType");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.SubDirectorates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<int?>("DirectorateId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortKey")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DirectorateId");

                    b.ToTable("SubDirectorates");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.TeamNotifications", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TeamNotifications");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Territory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Territory");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.ThanksAndSeniority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BookIssueName")
                        .HasColumnType("text");

                    b.Property<string>("BookNo")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("CalculationDate")
                        .HasColumnType("date");

                    b.Property<int>("CountOfMonths")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOfBook")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsCalculation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDocumentVerify")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeOfBookId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeOfSeniorityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TypeOfBookId");

                    b.HasIndex("TypeOfSeniorityId");

                    b.ToTable("ThanksAndSeniority");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.ThanksAndSeniorityCalculation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountOfMonths")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ThanksAndSeniorityCalculation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.TypeOfAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TypeOfAssignment");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.TypeOfBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TypeOfBook");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.TypeOfDisciplinary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountOfDayDelay")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TypeOfDisciplinary");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.TypeOfJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TypeOfJob");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.TypeOfLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TypeOfLeave");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.TypeOfSeniority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TypeOfSeniority");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.TypeOfService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TypeOfService");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Units", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("DirectorateId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortKey")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("SubDirectorateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubDirectorateId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Valuation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("BookDate")
                        .HasColumnType("date");

                    b.Property<string>("BookNo")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoneProcdureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Recommendation")
                        .HasColumnType("text");

                    b.Property<Guid>("SecondaryId")
                        .HasColumnType("uuid");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("ValuationDate")
                        .HasColumnType("date");

                    b.Property<string>("ValuationKey")
                        .HasColumnType("text");

                    b.Property<int?>("ValuationPoints")
                        .HasColumnType("integer");

                    b.Property<string>("ValuationType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Valuation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Absence", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("Absence")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.AcademicAchievement", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.JobDegree", "JobDegree")
                        .WithMany("AcademicAchievement")
                        .HasForeignKey("JobDegreeId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("JobDegree");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.AddressInformation", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("AddressInformation")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.Governorate", "Governorate")
                        .WithMany("AddressInformation")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.Province", "Province")
                        .WithMany("AddressInformation")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.Territory", "Territory")
                        .WithMany("AddressInformation")
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Governorate");

                    b.Navigation("Province");

                    b.Navigation("Territory");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.AdministrativeOrder", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("AdministrativeOrder")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Assignments", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("Assignments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.TypeOfAssignment", "TypeOfAssignment")
                        .WithMany("Assignments")
                        .HasForeignKey("TypeOfAssignmentId");

                    b.Navigation("Employee");

                    b.Navigation("TypeOfAssignment");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Attributes", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("Attributes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.ChangeDegrees", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("ChangeDegree")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobCategory", "JobCategoryFrom")
                        .WithMany("ChangeDegreeFrom")
                        .HasForeignKey("JobCategoryFromId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobCategory", "JobCategoryTo")
                        .WithMany("ChangeDegreeTo")
                        .HasForeignKey("JobCategoryToId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobDegree", "JobDegreeFrom")
                        .WithMany("ChangeDegreeFrom")
                        .HasForeignKey("JobDegreeFromId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobDegree", "JobDegreeTo")
                        .WithMany("ChangeDegreeTo")
                        .HasForeignKey("JobDegreeToId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobDescription", "JobDescriptionFrom")
                        .WithMany("ChangeDegreeJobDescriptionFrom")
                        .HasForeignKey("JobDescriptionFromId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobDescription", "JobDescriptionTo")
                        .WithMany("ChangeDegreeJobDescriptionTo")
                        .HasForeignKey("JobDescriptionToId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobTitle", "JobTitleFrom")
                        .WithMany("ChangeDegreeJobTitleFrom")
                        .HasForeignKey("JobTitleFromId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobTitle", "JobTitleTo")
                        .WithMany("ChangeDegreeJobTitleTo")
                        .HasForeignKey("JobTitleToId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("JobCategoryFrom");

                    b.Navigation("JobCategoryTo");

                    b.Navigation("JobDegreeFrom");

                    b.Navigation("JobDegreeTo");

                    b.Navigation("JobDescriptionFrom");

                    b.Navigation("JobDescriptionTo");

                    b.Navigation("JobTitleFrom");

                    b.Navigation("JobTitleTo");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.ChangeDueDates", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("ChangeDueDate")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.ChangeJobTitle", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("ChangeJobTitle")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobDescription", "NewJobDescription")
                        .WithMany("ChangeJobTitleNewJobDescription")
                        .HasForeignKey("NewJobDescriptionId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.JobTitle", "NewJobTitle")
                        .WithMany("ChangeJobTitleNewJobTitle")
                        .HasForeignKey("NewJobTitleId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.JobDescription", "OldJobDescription")
                        .WithMany("ChangeJobTitleOldJobDescription")
                        .HasForeignKey("OldJobDescriptionId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.JobTitle", "OldJobTitle")
                        .WithMany("ChangeJobTitleOldJobTitle")
                        .HasForeignKey("OldJobTitleId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Employee");

                    b.Navigation("NewJobDescription");

                    b.Navigation("NewJobTitle");

                    b.Navigation("OldJobDescription");

                    b.Navigation("OldJobTitle");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.ContactInformation", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("ContactInformation")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.LevelOfRelationship", "LevelOfRelationship")
                        .WithMany("ContactInformation")
                        .HasForeignKey("LevelOfRelationshipId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Employee");

                    b.Navigation("LevelOfRelationship");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.CorrectingAcademicAchievements", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.JobDegree", "DegreeFrom")
                        .WithMany("CorrectingAcademicAchievementDegreeFrom")
                        .HasForeignKey("DegreeFromId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.JobDegree", "DegreeTo")
                        .WithMany("CorrectingAcademicAchievementDegreeTo")
                        .HasForeignKey("DegreeToId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("CorrectingAcademicAchievements")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobCategory", "JobCategoryFrom")
                        .WithMany("CorrectingAcademicAchievementDegreeFrom")
                        .HasForeignKey("JobCategoryFromId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.JobCategory", "JobCategoryTo")
                        .WithMany("CorrectingAcademicAchievementJobCategoryTo")
                        .HasForeignKey("JobCategoryToId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.JobDescription", "JobDescriptionFrom")
                        .WithMany("CorrectingAcademicAchievementsDescriptionFrom")
                        .HasForeignKey("JobDescriptionFromId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobDescription", "JobDescriptionTo")
                        .WithMany("CorrectingAcademicAchievementsDescriptionTo")
                        .HasForeignKey("JobDescriptionToId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_CorrectingAcademicAchievements_JobDescription_JobDescripti~1");

                    b.HasOne("HRM.Hub.Domain.Entities.JobTitle", "JobTitleFrom")
                        .WithMany("CorrectingAcademicAchievementsJobTitleFrom")
                        .HasForeignKey("JobTitleFromId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobTitle", "JobTitleTo")
                        .WithMany("CorrectingAcademicAchievementsJobTitleTo")
                        .HasForeignKey("JobTitleToId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("DegreeFrom");

                    b.Navigation("DegreeTo");

                    b.Navigation("Employee");

                    b.Navigation("JobCategoryFrom");

                    b.Navigation("JobCategoryTo");

                    b.Navigation("JobDescriptionFrom");

                    b.Navigation("JobDescriptionTo");

                    b.Navigation("JobTitleFrom");

                    b.Navigation("JobTitleTo");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Departments", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Directorates", "Directorate")
                        .WithMany("Departments")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.SubDirectorates", "SubDirectorate")
                        .WithMany("Departments")
                        .HasForeignKey("SubDirectorateId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Directorate");

                    b.Navigation("SubDirectorate");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.DocVerifications", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("DocVerification")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.EducationInformation", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.AcademicAchievement", "AcademicAchievement")
                        .WithMany("EducationInformation")
                        .HasForeignKey("AcademicAchievementId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.AcademicField", "AcademicField")
                        .WithMany("EducationInformation")
                        .HasForeignKey("AcademicFieldId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.Country", "Country")
                        .WithMany("EducationInformation")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("EducationInformation")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.PreciseAcademicField", "PreciseAcademicField")
                        .WithMany("EducationInformation")
                        .HasForeignKey("PreciseAcademicFieldId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.StudyType", "StudyType")
                        .WithMany("EducationInformation")
                        .HasForeignKey("StudyTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("AcademicAchievement");

                    b.Navigation("AcademicField");

                    b.Navigation("Country");

                    b.Navigation("Employee");

                    b.Navigation("PreciseAcademicField");

                    b.Navigation("StudyType");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.EmployeeApplicableLaws", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("EmployeeApplicableLaws")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.Laws", "Law")
                        .WithMany("EmployeeApplicableLaws")
                        .HasForeignKey("LawId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Employee");

                    b.Navigation("Law");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.EmployeeCourse", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("EmployeeCourses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.EmployeeDisciplinary", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("EmployeeDisciplinary")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.TypeOfDisciplinary", "TypeOfDisciplinary")
                        .WithMany("EmployeeDisciplinary")
                        .HasForeignKey("TypeOfDisciplinaryId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("TypeOfDisciplinary");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.EmployeeDocuments", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.EmployeeDocumentsType", "EmployeeDocumentType")
                        .WithMany("EmployeeDocuments")
                        .HasForeignKey("EmployeeDocumentTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("EmployeeDocuments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeDocumentType");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.EmployeePosition", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Departments", "Department")
                        .WithMany("EmployeePositions")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("HRM.Hub.Domain.Entities.Directorates", "Directorate")
                        .WithMany("EmployeePositions")
                        .HasForeignKey("DirectorateId");

                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("EmployeePositions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.Position", "Position")
                        .WithMany("EmployeePositions")
                        .HasForeignKey("PositionId");

                    b.HasOne("HRM.Hub.Domain.Entities.Sections", "Section")
                        .WithMany("EmployeePositions")
                        .HasForeignKey("SectionId");

                    b.HasOne("HRM.Hub.Domain.Entities.SubDirectorates", "SubDirectorate")
                        .WithMany("EmployeePositions")
                        .HasForeignKey("SubDirectorateId");

                    b.HasOne("HRM.Hub.Domain.Entities.Units", "Unit")
                        .WithMany("EmployeePositions")
                        .HasForeignKey("UnitId");

                    b.Navigation("Department");

                    b.Navigation("Directorate");

                    b.Navigation("Employee");

                    b.Navigation("Position");

                    b.Navigation("Section");

                    b.Navigation("SubDirectorate");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.EmployeeService", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithOne("EmployeeService")
                        .HasForeignKey("HRM.Hub.Domain.Entities.EmployeeService", "Id")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Employees", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Country", "Country")
                        .WithMany("Employees")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.HandPull", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("HandPulls")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Interruption", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("Interruptions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.JobCategory", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.JobDegree", "Degree")
                        .WithMany("JobCategory")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.JobInformation", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithOne("JobInformation")
                        .HasForeignKey("HRM.Hub.Domain.Entities.JobInformation", "Id")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.TypeOfJob", "TypeOfJob")
                        .WithMany("JobInformation")
                        .HasForeignKey("TypeOfJobId");

                    b.Navigation("Employee");

                    b.Navigation("TypeOfJob");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.JobTitle", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.JobDegree", "Degree")
                        .WithMany("JobTitle")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Leaves", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Country", "Country")
                        .WithMany("Leaves")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.LongLeaveType", "LongLeaveType")
                        .WithMany("Leaves")
                        .HasForeignKey("LongLeaveTypeId");

                    b.HasOne("HRM.Hub.Domain.Entities.NormalLeaveType", "NormalLeaveType")
                        .WithMany("Leaves")
                        .HasForeignKey("NormalLeaveTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.SicknessType", "SicknessType")
                        .WithMany("Leaves")
                        .HasForeignKey("SicknessTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Country");

                    b.Navigation("Employee");

                    b.Navigation("LongLeaveType");

                    b.Navigation("NormalLeaveType");

                    b.Navigation("SicknessType");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.LeavesBalance", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithOne("LeavesBalances")
                        .HasForeignKey("HRM.Hub.Domain.Entities.LeavesBalance", "Id")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.LeavesMedicalBalance", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithOne("LeavesMedicalBalances")
                        .HasForeignKey("HRM.Hub.Domain.Entities.LeavesMedicalBalance", "Id")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.LogLeavesBalance", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("LogLeavesBalance")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.LogPromotionWithholding", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("LogPromotionWithholdings")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.ManagementInformation", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Departments", "Department")
                        .WithMany("ManagementInformation")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.Directorates", "Directorate")
                        .WithMany("ManagementInformation")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobDegree", "EmploymentDegree")
                        .WithMany("ManagementInformationEmploymentDegree")
                        .HasForeignKey("EmploymentDegreeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithOne("ManagementInformation")
                        .HasForeignKey("HRM.Hub.Domain.Entities.ManagementInformation", "Id")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobDescription", "JobDescription")
                        .WithMany("ManagementInformation")
                        .HasForeignKey("JobDescriptionId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobTitle", "JobTitle")
                        .WithMany("ManagementInformation")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.Position", "Position")
                        .WithMany("ManagementInformation")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.Sections", "Section")
                        .WithMany("ManagementInformation")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.JobDegree", "StopJobDegree")
                        .WithMany("ManagementInformationStopJobDegree")
                        .HasForeignKey("StopJobDegreeId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.SubDirectorates", "SubDirectorate")
                        .WithMany("ManagementInformation")
                        .HasForeignKey("SubDirectorateId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.Units", "Unit")
                        .WithMany("ManagementInformation")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Department");

                    b.Navigation("Directorate");

                    b.Navigation("Employee");

                    b.Navigation("EmploymentDegree");

                    b.Navigation("JobDescription");

                    b.Navigation("JobTitle");

                    b.Navigation("Position");

                    b.Navigation("Section");

                    b.Navigation("StopJobDegree");

                    b.Navigation("SubDirectorate");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.MarriageInformation", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("MarriageInformation")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.MartyrsAndWounded", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("MartyrsAndWoundeds")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Movements", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("Movements")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.Departments", "FromDepartment")
                        .WithMany("MovementsFromDepartment")
                        .HasForeignKey("FromDepartmentId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.Directorates", "FromDirectorate")
                        .WithMany("MovementsFromDirectorate")
                        .HasForeignKey("FromDirectorateId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.Sections", "FromSection")
                        .WithMany("MovementsFromSection")
                        .HasForeignKey("FromSectionId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.SubDirectorates", "FromSubDirectorate")
                        .WithMany("MovementsFromSubDirectorate")
                        .HasForeignKey("FromSubDirectorateId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.Units", "FromUnite")
                        .WithMany("MovementsFromUnite")
                        .HasForeignKey("FromUniteId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.Departments", "ToDepartment")
                        .WithMany("MovementsToDepartment")
                        .HasForeignKey("ToDepartmentId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.Directorates", "ToDirectorate")
                        .WithMany("MovementsToDirectorate")
                        .HasForeignKey("ToDirectorateId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.Sections", "ToSection")
                        .WithMany("MovementsToSection")
                        .HasForeignKey("ToSectionId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.SubDirectorates", "ToSubDirectorate")
                        .WithMany("MovementsToSubDirectorate")
                        .HasForeignKey("ToSubDirectorateId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.Units", "ToUnit")
                        .WithMany("MovementsToUnit")
                        .HasForeignKey("ToUnitId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Employee");

                    b.Navigation("FromDepartment");

                    b.Navigation("FromDirectorate");

                    b.Navigation("FromSection");

                    b.Navigation("FromSubDirectorate");

                    b.Navigation("FromUnite");

                    b.Navigation("ToDepartment");

                    b.Navigation("ToDirectorate");

                    b.Navigation("ToSection");

                    b.Navigation("ToSubDirectorate");

                    b.Navigation("ToUnit");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Promotion", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithOne("Promotion")
                        .HasForeignKey("HRM.Hub.Domain.Entities.Promotion", "Id")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobCategory", "JobCategory")
                        .WithMany("Promotions")
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.JobDegree", "JobDegree")
                        .WithMany("Promotions")
                        .HasForeignKey("JobDegreeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.PromotionGroup", "SentPromotionGroup")
                        .WithMany("Promotion")
                        .HasForeignKey("SentPromotionGroupId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Employee");

                    b.Navigation("JobCategory");

                    b.Navigation("JobDegree");

                    b.Navigation("SentPromotionGroup");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Resignation", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("Resignations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Retirement", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.AcademicAchievement", "AcademicAchievement")
                        .WithMany()
                        .HasForeignKey("AcademicAchievementId");

                    b.HasOne("HRM.Hub.Domain.Entities.Directorates", "Directorate")
                        .WithMany()
                        .HasForeignKey("DirectorateId");

                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.EmployeePosition", "EmployeePosition")
                        .WithMany()
                        .HasForeignKey("EmployeePositionId");

                    b.HasOne("HRM.Hub.Domain.Entities.JobCategory", "JobCategory")
                        .WithMany()
                        .HasForeignKey("JobCategoryId");

                    b.HasOne("HRM.Hub.Domain.Entities.JobDegree", "JobDegree")
                        .WithMany()
                        .HasForeignKey("JobDegreeId");

                    b.HasOne("HRM.Hub.Domain.Entities.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId");

                    b.HasOne("HRM.Hub.Domain.Entities.SubDirectorates", "SubDirectorate")
                        .WithMany()
                        .HasForeignKey("SubDirectorateId");

                    b.Navigation("AcademicAchievement");

                    b.Navigation("Directorate");

                    b.Navigation("Employee");

                    b.Navigation("EmployeePosition");

                    b.Navigation("JobCategory");

                    b.Navigation("JobDegree");

                    b.Navigation("JobTitle");

                    b.Navigation("SubDirectorate");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Sections", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Departments", "Department")
                        .WithMany("Sections")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.Directorates", "Directorate")
                        .WithMany("Sections")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.SubDirectorates", "SubDirectorate")
                        .WithMany("Sections")
                        .HasForeignKey("SubDirectorateId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Directorate");

                    b.Navigation("SubDirectorate");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.ServiceCalculation", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("ServiceCalculations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.Employees", null)
                        .WithMany("ServiceCalculation")
                        .HasForeignKey("EmployeesId");

                    b.HasOne("HRM.Hub.Domain.Entities.TypeOfService", "TypeOfService")
                        .WithMany("ServiceCalculation")
                        .HasForeignKey("TypeOfServiceId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("TypeOfService");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.StudyFile", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("StudyFile")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.StudyLeave", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.AcademicAchievement", "AcademicAchievement")
                        .WithMany("StudyLeave")
                        .HasForeignKey("AcademicAchievementId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.AcademicCertificateType", "AcademicCertificateType")
                        .WithMany("StudyLeave")
                        .HasForeignKey("AcademicCertificateTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.AcademicField", "AcademicField")
                        .WithMany("StudyLeave")
                        .HasForeignKey("AcademicFieldId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.Country", "Country")
                        .WithMany("StudyLeave")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("StudyLeave")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.StudyFile", "StudyFile")
                        .WithMany("StudyLeave")
                        .HasForeignKey("StudyFileId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.StudyResult", "StudyResult")
                        .WithMany("StudyLeave")
                        .HasForeignKey("StudyResultId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.StudyStatus", "StudyStatus")
                        .WithMany("StudyLeave")
                        .HasForeignKey("StudyStatusId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("AcademicAchievement");

                    b.Navigation("AcademicCertificateType");

                    b.Navigation("AcademicField");

                    b.Navigation("Country");

                    b.Navigation("Employee");

                    b.Navigation("StudyFile");

                    b.Navigation("StudyResult");

                    b.Navigation("StudyStatus");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.StudyLeaveExtension", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("StudyLeaveExtension")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.StudyExtensionOrderType", "StudyExtensionOrderType")
                        .WithMany("StudyLeaveExtension")
                        .HasForeignKey("StudyExtensionOrderTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("HRM.Hub.Domain.Entities.StudyFile", "StudyFile")
                        .WithMany("StudyLeaveExtension")
                        .HasForeignKey("StudyFileId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Employee");

                    b.Navigation("StudyExtensionOrderType");

                    b.Navigation("StudyFile");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.SubDirectorates", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Directorates", "Directorate")
                        .WithMany("SubDirectorates")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Directorate");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.TeamNotifications", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("TeamNotifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.ThanksAndSeniority", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("ThanksAndSeniority")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.TypeOfBook", "TypeOfBook")
                        .WithMany("ThanksAndSeniority")
                        .HasForeignKey("TypeOfBookId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.TypeOfSeniority", "TypeOfSeniority")
                        .WithMany("ThanksAndSeniority")
                        .HasForeignKey("TypeOfSeniorityId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("TypeOfBook");

                    b.Navigation("TypeOfSeniority");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Units", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Departments", "Department")
                        .WithMany("Units")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.Directorates", "Directorate")
                        .WithMany("Units")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.Sections", "Section")
                        .WithMany("Units")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("HRM.Hub.Domain.Entities.SubDirectorates", "SubDirectorate")
                        .WithMany("Units")
                        .HasForeignKey("SubDirectorateId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Directorate");

                    b.Navigation("Section");

                    b.Navigation("SubDirectorate");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Valuation", b =>
                {
                    b.HasOne("HRM.Hub.Domain.Entities.Employees", "Employee")
                        .WithMany("Valuation")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.AcademicAchievement", b =>
                {
                    b.Navigation("EducationInformation");

                    b.Navigation("StudyLeave");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.AcademicCertificateType", b =>
                {
                    b.Navigation("StudyLeave");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.AcademicField", b =>
                {
                    b.Navigation("EducationInformation");

                    b.Navigation("StudyLeave");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Country", b =>
                {
                    b.Navigation("EducationInformation");

                    b.Navigation("Employees");

                    b.Navigation("Leaves");

                    b.Navigation("StudyLeave");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Departments", b =>
                {
                    b.Navigation("EmployeePositions");

                    b.Navigation("ManagementInformation");

                    b.Navigation("MovementsFromDepartment");

                    b.Navigation("MovementsToDepartment");

                    b.Navigation("Sections");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Directorates", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("EmployeePositions");

                    b.Navigation("ManagementInformation");

                    b.Navigation("MovementsFromDirectorate");

                    b.Navigation("MovementsToDirectorate");

                    b.Navigation("Sections");

                    b.Navigation("SubDirectorates");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.EmployeeDocumentsType", b =>
                {
                    b.Navigation("EmployeeDocuments");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Employees", b =>
                {
                    b.Navigation("Absence");

                    b.Navigation("AddressInformation");

                    b.Navigation("AdministrativeOrder");

                    b.Navigation("Assignments");

                    b.Navigation("Attributes");

                    b.Navigation("ChangeDegree");

                    b.Navigation("ChangeDueDate");

                    b.Navigation("ChangeJobTitle");

                    b.Navigation("ContactInformation");

                    b.Navigation("CorrectingAcademicAchievements");

                    b.Navigation("DocVerification");

                    b.Navigation("EducationInformation");

                    b.Navigation("EmployeeApplicableLaws");

                    b.Navigation("EmployeeCourses");

                    b.Navigation("EmployeeDisciplinary");

                    b.Navigation("EmployeeDocuments");

                    b.Navigation("EmployeePositions");

                    b.Navigation("EmployeeService");

                    b.Navigation("HandPulls");

                    b.Navigation("Interruptions");

                    b.Navigation("JobInformation");

                    b.Navigation("Leaves");

                    b.Navigation("LeavesBalances");

                    b.Navigation("LeavesMedicalBalances");

                    b.Navigation("LogLeavesBalance");

                    b.Navigation("LogPromotionWithholdings");

                    b.Navigation("ManagementInformation");

                    b.Navigation("MarriageInformation");

                    b.Navigation("MartyrsAndWoundeds");

                    b.Navigation("Movements");

                    b.Navigation("Promotion");

                    b.Navigation("Resignations");

                    b.Navigation("ServiceCalculation");

                    b.Navigation("ServiceCalculations");

                    b.Navigation("StudyFile");

                    b.Navigation("StudyLeave");

                    b.Navigation("StudyLeaveExtension");

                    b.Navigation("TeamNotifications");

                    b.Navigation("ThanksAndSeniority");

                    b.Navigation("Valuation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Governorate", b =>
                {
                    b.Navigation("AddressInformation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.JobCategory", b =>
                {
                    b.Navigation("ChangeDegreeFrom");

                    b.Navigation("ChangeDegreeTo");

                    b.Navigation("CorrectingAcademicAchievementDegreeFrom");

                    b.Navigation("CorrectingAcademicAchievementJobCategoryTo");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.JobDegree", b =>
                {
                    b.Navigation("AcademicAchievement");

                    b.Navigation("ChangeDegreeFrom");

                    b.Navigation("ChangeDegreeTo");

                    b.Navigation("CorrectingAcademicAchievementDegreeFrom");

                    b.Navigation("CorrectingAcademicAchievementDegreeTo");

                    b.Navigation("JobCategory");

                    b.Navigation("JobTitle");

                    b.Navigation("ManagementInformationEmploymentDegree");

                    b.Navigation("ManagementInformationStopJobDegree");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.JobDescription", b =>
                {
                    b.Navigation("ChangeDegreeJobDescriptionFrom");

                    b.Navigation("ChangeDegreeJobDescriptionTo");

                    b.Navigation("ChangeJobTitleNewJobDescription");

                    b.Navigation("ChangeJobTitleOldJobDescription");

                    b.Navigation("CorrectingAcademicAchievementsDescriptionFrom");

                    b.Navigation("CorrectingAcademicAchievementsDescriptionTo");

                    b.Navigation("ManagementInformation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.JobTitle", b =>
                {
                    b.Navigation("ChangeDegreeJobTitleFrom");

                    b.Navigation("ChangeDegreeJobTitleTo");

                    b.Navigation("ChangeJobTitleNewJobTitle");

                    b.Navigation("ChangeJobTitleOldJobTitle");

                    b.Navigation("CorrectingAcademicAchievementsJobTitleFrom");

                    b.Navigation("CorrectingAcademicAchievementsJobTitleTo");

                    b.Navigation("ManagementInformation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Laws", b =>
                {
                    b.Navigation("EmployeeApplicableLaws");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.LevelOfRelationship", b =>
                {
                    b.Navigation("ContactInformation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.LongLeaveType", b =>
                {
                    b.Navigation("Leaves");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.NormalLeaveType", b =>
                {
                    b.Navigation("Leaves");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Position", b =>
                {
                    b.Navigation("EmployeePositions");

                    b.Navigation("ManagementInformation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.PreciseAcademicField", b =>
                {
                    b.Navigation("EducationInformation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.PromotionGroup", b =>
                {
                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Province", b =>
                {
                    b.Navigation("AddressInformation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Sections", b =>
                {
                    b.Navigation("EmployeePositions");

                    b.Navigation("ManagementInformation");

                    b.Navigation("MovementsFromSection");

                    b.Navigation("MovementsToSection");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.SicknessType", b =>
                {
                    b.Navigation("Leaves");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.StudyExtensionOrderType", b =>
                {
                    b.Navigation("StudyLeaveExtension");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.StudyFile", b =>
                {
                    b.Navigation("StudyLeave");

                    b.Navigation("StudyLeaveExtension");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.StudyResult", b =>
                {
                    b.Navigation("StudyLeave");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.StudyStatus", b =>
                {
                    b.Navigation("StudyLeave");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.StudyType", b =>
                {
                    b.Navigation("EducationInformation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.SubDirectorates", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("EmployeePositions");

                    b.Navigation("ManagementInformation");

                    b.Navigation("MovementsFromSubDirectorate");

                    b.Navigation("MovementsToSubDirectorate");

                    b.Navigation("Sections");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Territory", b =>
                {
                    b.Navigation("AddressInformation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.TypeOfAssignment", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.TypeOfBook", b =>
                {
                    b.Navigation("ThanksAndSeniority");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.TypeOfDisciplinary", b =>
                {
                    b.Navigation("EmployeeDisciplinary");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.TypeOfJob", b =>
                {
                    b.Navigation("JobInformation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.TypeOfSeniority", b =>
                {
                    b.Navigation("ThanksAndSeniority");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.TypeOfService", b =>
                {
                    b.Navigation("ServiceCalculation");
                });

            modelBuilder.Entity("HRM.Hub.Domain.Entities.Units", b =>
                {
                    b.Navigation("EmployeePositions");

                    b.Navigation("ManagementInformation");

                    b.Navigation("MovementsFromUnite");

                    b.Navigation("MovementsToUnit");
                });
#pragma warning restore 612, 618
        }
    }
}
